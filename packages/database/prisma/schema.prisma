generator client {
  provider = "prisma-client-js"
  output   = "../dist"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PermissionAction {
  READ
  CREATE
  UPDATE
  DELETE
}

enum PermissionResource {
  ADMIN_SETTINGS
}

enum UserType {
  ADMIN
  TEACHER
  STUDENT
}

enum SocialMedia {
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
}

model Role {
  id   String @id @default(uuid())
  name String @unique

  users       User[]
  invites     Invite[]
  permissions Permission[] @relation("RoleToPermission")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Permission {
  id       String             @id @default(uuid())
  actions  PermissionAction[]
  resource PermissionResource

  roleId String
  role   Role   @relation(fields: [roleId], references: [id], name: "RoleToPermission")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("permissions")
}

model User {
  id       String   @id @default(uuid())
  name     String
  type     UserType
  email    String   @unique
  username String   @unique
  password String

  teacher  Teacher?
  student  Student?
  socials  Socials[]
  roleId   String?
  schoolId String
  role     Role?     @relation(fields: [roleId], references: [id])
  school   School    @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model School {
  id           String  @id @default(uuid())
  name         String
  description  String?
  website      String?
  contactEmail String?
  supportEmail String?
  address      String?
  phoneNumber  String?

  socials     Socials[]
  invites     Invite[]
  users       User[]
  classGroups ClassGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("schools")
}

model Socials {
  id   String      @id @default(uuid())
  type SocialMedia
  link String

  userId   String?
  schoolId String?
  user     User?   @relation(fields: [userId], references: [id])
  school   School? @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
  @@unique([schoolId, type])
  @@map("socials")
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  type      UserType
  link      String   @unique
  used      Boolean  @default(false)
  expiresAt DateTime

  schoolId String?
  roleId   String?
  school   School? @relation(fields: [schoolId], references: [id])
  role     Role?   @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, schoolId])
  @@map("invites")
}

model Teacher {
  id String @id @default(uuid())

  subjects TeacherSubjectClass[]
  userId   String                @unique
  user     User                  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teachers")
}

model Student {
  id String @id @default(uuid())

  classes StudentClass[]
  userId  String         @unique
  user    User           @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

model AcademicYear {
  id       String   @id @default(uuid())
  year     String   @unique
  startsAt DateTime
  endsAt   DateTime

  classInstances ClassInstance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academic_years")
}

model ClassGroup {
  id   String @id @default(uuid())
  name String

  instances ClassInstance[]
  schoolId  String
  school    School          @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("class_groups")
}

model ClassInstance {
  id String @id @default(uuid())

  students       StudentClass[]
  subjects       SubjectClass[]
  academicYearId String
  classGroupId   String
  academicYear   AcademicYear   @relation(fields: [academicYearId], references: [id])
  classGroup     ClassGroup     @relation(fields: [classGroupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([academicYearId, classGroupId])
  @@map("class_instances")
}

model Subject {
  id   String @id @default(uuid())
  name String @unique

  subjectClasses SubjectClass[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subjects")
}

model SubjectClass {
  id String @id @default(uuid())

  teachers        TeacherSubjectClass[]
  subjectId       String
  classInstanceId String
  subject         Subject               @relation(fields: [subjectId], references: [id])
  classInstance    ClassInstance         @relation(fields: [classInstanceId], references: [id])

  @@unique([subjectId, classInstanceId])
  @@map("subject_classes")
}

model TeacherSubjectClass {
  id String @id @default(uuid())

  teacherId      String
  subjectClassId String
  teacher        Teacher      @relation(fields: [teacherId], references: [id])
  subjectClass   SubjectClass @relation(fields: [subjectClassId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, subjectClassId])
  @@map("teacher_subject_classes")
}

model StudentClass {
  id       String    @id @default(uuid())
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  studentId       String
  classInstanceId String
  student         Student       @relation(fields: [studentId], references: [id])
  classInstance   ClassInstance @relation(fields: [classInstanceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, classInstanceId])
  @@map("student_classes")
}
